<?php

function wisski_pages_createWissKIContent() {
    
  $form = array();

  $gotIDs = variable_get('wisski_pathbuilderMenuIDs', array());

  foreach($gotIDs as $id => $itemid) {
    $oldlinks[$itemid] = menu_link_load($id);
  }
  
  $contents = $oldlinks;

  if(variable_get("wisski_pages_create_fields", 1)) {
    $form['wisskiFormContent'] = array(
      '#type' => 'fieldset',
      '#title' => t('WissKI Fieldbased Input'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#value' => wisski_pages_form_add_list($contents),
    );
  }

  if((module_exists("wisski_editor") || module_exists('wisski_textmod')) && variable_get("wisski_pages_create_text", 1)) {
    $form['wisskiTextContent'] = array(
      '#type' => 'fieldset',
      '#title' => t('WissKI Textbased Input'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#value' => wisski_pages_text_add_list($contents),
    );
  }
  
  return $form;
}

function wisski_pages_form_add_list($content) {
  $output = '';

  $gotIDs = variable_get('wisski_pathbuilderMenuIDs', array());
  
  // array for weight => string to sort the output
  $out = array();
  
  if ($content) {
    $output = '<dl class="node-type-list">';
    foreach ($content as $item) {

      if(module_exists("menu_per_role")) {
        if(is_null(_menu_per_role_access($item['mlid']))) {
          $out[$item['weight']] .= '<dt>'. l($item['link_title'], $item['href']) .'</dt>';
          if(isset($gotIDs[$item['mlid']])) {

            $result = db_query("SELECT * FROM {wisski_template} WHERE id = " . $gotIDs[$item['mlid']]);
            $arr = db_fetch_array($result);

            $out[$item['weight']] .= '<dd>'. filter_xss_admin($arr['description']) .'</dd>';
          }
        }      
      } else {
        $out[$item['weight']] .= '<dt>'. l($item['link_title'], $item['href']) .'</dt>';
        if(isset($gotIDs[$item['mlid']])) {

          $result = db_query("SELECT * FROM {wisski_template} WHERE id = " . $gotIDs[$item['mlid']]);
          $arr = db_fetch_array($result);

          $out[$item['weight']] .= '<dd>'. filter_xss_admin($arr['description']) .'</dd>';
        }
      }
    }

    // sort by weight    
    ksort($out);
    
    // reconstruct the output
    foreach($out as $outpart) {
      $output .= $outpart;    
    }
       
    $output .= '</dl>';
   
   }
  return $output;
}

function wisski_pages_text_add_list($content) {
  $output = '';

  $gotIDs = variable_get('wisski_pathbuilderMenuIDs', array());
  
  // array for weight => string to sort the output
  $out = array();
  
  if ($content) {
    $output = '<dl class="node-type-list">';
    // added by Martin Scholz
    if (module_exists('wisski_textmod')) {
      
      $model = wisski_textmod_get_model();
      foreach ($content as $item) {
        if (!isset($gotIDs[$item['mlid']])) continue;
        $gid = $gotIDs[$item['mlid']];
  
        //if(module_exists("menu_per_role")) {
        if(is_null(_menu_per_role_access($item['mlid']))) {
          
          // only make a link if we have appropriate path defs
          // ie. if it's a text group or if there's a path to a text group
          if (isset($model['groups'][$gid]) && (!empty($model['groups'][$gid]['text_class']) || !empty($model['groups'][$gid]['foreign_paths']))) {
            $out[$item['weight']] .= '<dt>' . l($item['link_title'], "node/add/individual/by_text/" . $gid) . '</dt>';
            $result = db_query("SELECT * FROM {wisski_template} WHERE id = " . $gotIDs[$item['mlid']]);

            $arr = db_fetch_array($result);
            $out[$item['weight']]  .= '<dd>'. filter_xss_admin($arr['description']) .'</dd>';
          }

        } 
        //}
      }
     

    } else {

      foreach ($content as $item) {
  
        if(module_exists("menu_per_role")) {
          if(is_null(_menu_per_role_access($item['mlid']))) {
        
            $out[$item['weight']] .= '<dt>'. l($item['link_title'], "node/add/individual/annotext/" . $gotIDs[$item['mlid']]) .'</dt>';
            if(isset($gotIDs[$item['mlid']])) {
              $result = db_query("SELECT * FROM {wisski_template} WHERE id = " . $gotIDs[$item['mlid']]);
              $arr = db_fetch_array($result);
  
              $out[$item['weight']] .= '<dd>'. filter_xss_admin($arr['description']) .'</dd>';
            }
          }      
        } else {
          $out[$item['weight']]  .= '<dt>'. l($item['link_title'], "node/add/individual/annotext/" . $gotIDs[$item['mlid']]) .'</dt>';
          if(isset($gotIDs[$item['mlid']])) {
            $result = db_query("SELECT * FROM {wisski_template} WHERE id = " . $gotIDs[$item['mlid']]);
            $arr = db_fetch_array($result);
  
            $out[$item['weight']] .= '<dd>'. filter_xss_admin($arr['description']) .'</dd>';
          }
        }
      }

    }
   
    // sort by weight    
    ksort($out);
    
    // reconstruct the output
    foreach($out as $outpart) {
      $output .= $outpart;    
    }
   
    $output .= '</dl>';
   
   }
  return $output;
}
                                    

function wisski_pages_menu_block($item) {
  $content = array();
  if (!isset($item['mlid'])) {
    $item += db_fetch_array(db_query("SELECT mlid, menu_name FROM {menu_links} ml WHERE ml.link_path = '%s' AND ml.module = 'system'", $item['path']));
  }
    
  $result = db_query(" SELECT * FROM {menu_links} ml WHERE ml.plid = %d AND hidden = 0 AND link_title != 'Group'", $item['mlid']);
  while ($item = db_fetch_array($result)) {
    _menu_link_translate($item);

    // The link 'description' either derived from the hook_menu 'description' or
    // entered by the user via menu module is saved as the title attribute.
    if (!empty($item['localized_options']['attributes']['title'])) {
      $item['description'] = $item['localized_options']['attributes']['title'];
    }
    // Prepare for sorting as in function _menu_tree_check_access().
    // The weight is offset so it is always positive, with a uniform 5-digits.
    $content[(50000 + $item['weight']) .' '. drupal_strtolower($item['link_title']) .' '. $item['mlid']] = $item;
  }
  return $content;
}

function wisski_pages_createContent() {
  
  $form = array();

  $gotIDs = variable_get('wisski_pathbuilderMenuIDs', array());
  
  $wisskimlid = array();

  foreach($gotIDs as $id => $itemid) {
    $item = menu_link_load($id);
    if($item['hidden'] == 0)
      $oldlinks[$itemid] = $item;

    if($item['hidden'] == 0)
      $wisskimlid[] = $oldlinks[$itemid]["mlid"];
  }

  if($oldlinks)  
    $contents = $oldlinks;

  if(variable_get("wisski_pages_create_fields", 1)) {
    $form['wisskiFormContent'] = array(
      '#type' => 'fieldset',
      '#title' => t('WissKI Fieldbased Input'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#value' => wisski_pages_form_add_list($contents),
    );
  }
  
  if((module_exists("wisski_editor") || module_exists('wisski_textmod')) && variable_get("wisski_pages_create_text", 1)) {
    $form['wisskiTextContent'] = array(
      '#type' => 'fieldset',
      '#title' => t('WissKI Textbased Input'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#value' => wisski_pages_text_add_list($contents),
    );
  }


  $item = menu_get_item();

  $contents = system_admin_menu_block($item);

  $mycont = array();
  foreach($contents as $content) {
    if($content['link_title'] != "Individual node" && $content['link_title'] != "Class node" && $content['link_title'] != "Property node") {
      if(!in_array($content["mlid"], $wisskimlid))
        $mycont[] = $content;
    }
  }      
   
  $form['drupalContent'] = array(
    '#type' => 'fieldset',
    '#title' => t('CMS'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#value' => theme('node_add_list', $mycont),
  );

   return $form;
}

function wisski_pages_menu() {
  $items = array();
  
  $items['node/add'] = array(
    'title' => t('Create Content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_pages_createContent'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('wisski access templateCreate'),
  );
  
  $items['node/add/individual'] = array(
    'title' => t('Create WissKI Content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_pages_createWissKIContent'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('wisski access templateCreate'),
  );

  return $items;  
}
    
function wisski_pages_form_alter(&$form, &$form_state, $form_id) {
    
  if($form_id == 'wisski_visualSettings') {
    $buttons = $form['buttons'];
    unset($form['buttons']);
    $form[] = (wisski_pages_visualSettings());  
    $form['buttons'] = $buttons;
  }
}                              

/**
 * Make visual settings available
 *
 * @author Mark Fichtner
 *
 */
function wisski_pages_visualSettings() {
  
  $form = array ();

  $form['wisski_pages_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pages Settings'),
    '#weight' => 500,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['wisski_pages_fieldset']['wisski_pages_create_fields'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create using fields'),
    '#description' => t('Show the fieldbased-section in the create menu?'),
    '#default_value' => variable_get('wisski_pages_create_fields', 1),
  );
  
    $form['wisski_pages_fieldset']['wisski_pages_create_text'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create using texts'),
    '#description' => t('Show the text-section in the create menu?'),
    '#default_value' => variable_get('wisski_pages_create_text', 1),
  );

  return $form;

}